name: Conformance

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request: {}

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      has_tag: ${{ steps.get_info.outputs.has_tag }}
      tag: ${{ steps.get_info.outputs.tag }}
    steps:
      - id: get_info
        run: |
          tag="${REF##*/}"
          echo "::set-output name=has_tag::$has_tag"
          echo "::set-output name=tag::$tag"
        env:
          REF: ${{ github.ref }}
          has_tag: ${{ startsWith(github.ref, 'refs/tags/') }}

  conformance:
    needs: info
    runs-on: ubuntu-latest
    env:
      RUBYOPT: -W0 # To suppress warnings

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Install Fluentd
        run: |
          gem install -N fluentd
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ldc-latest
      - name: Install medal
        run: |
          git clone https://github.com/tom-tan/medal.git
          cd medal
          dub build -b release
          sudo cp bin/medal /usr/bin
          cd $GITHUB_WORKSPACE
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Setup Python for testing
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'
      - name: Install cwltest
        run: pip install cwltest
      - name: Run example
        run: cwltest --tool $GITHUB_WORKSPACE/ep3-runner --test test.yml --timeout=30 --junit-xml=junit.xml
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: junit-example.xml
          path: junit.xml
      - name: Prepare CWL repository for conformance test
        run: git clone --depth 1 https://github.com/common-workflow-language/common-workflow-language.git cwl
      - name: Run conformance test
        run: |
          cd cwl
          ./run_test.sh RUNNER=$GITHUB_WORKSPACE/ep3-runner EXTRA='--debug' --badgedir=badges --junit-xml=junit.xml --timeout=30 || true
          cd $GITHUB_WORKSPACE
      - name: Save badges
        if: success() && github.event_name == 'push'
        run: |
          git clone --depth 1 https://${GITHUB_ACTOR}:${CONFORMANCE_TOKEN}@github.com/tom-tan/conformance.git

          cd conformance
          conformance_dir=conformance/ep3/cwl_${cwlVersion}

          mkdir -p ${conformance_dir}
          rm -rf ${conformance_dir}/ep3_master
          cp -r $GITHUB_WORKSPACE/cwl/${cwlVersion}/badges ${conformance_dir}/ep3_master
          commit=$(echo $GITHUB_SHA | cut -b -6)
          printf '{ "subject": "commit", "status": "%s", "color": "blue" }' $commit > ${conformance_dir}/ep3_master/commit.json

          git config user.name "ep3 bot"
          git config user.email "ep3-bot@users.noreply.github.com"
          git add ${conformance_dir}/ep3_master

          if [ "$has_tag" = "true" ]; then
            rm -rf ${conformance_dir}/ep3_latest ${conformance_dir}/ep3_${tag}
            cp -r ${conformance_dir}/ep3_master ${conformance_dir}/ep3_latest
            cp -r ${conformance_dir}/ep3_master ${conformance_dir}/ep3_${tag}
            git add ${conformance_dir}/ep3_latest ${conformance_dir}/ep3_${tag}
            printf '{ "subject": "version", "status": "%s", "color": "green" }' ${tag} > ${conformance_dir}/ep3_latest/version.json
            cp ${conformance_dir}/ep3_latest/version.json ${conformance_dir}/ep3_${tag}/version.json
          fi

          git diff-index --quiet HEAD || git commit -m "Conformance test of ep3 for CWL ${cwlVersion}" -m " Commit: ${GITHUB_SHA}"

          if [ "$has_tag" = "true" ]; then
            git tag -a "${tag}" -m "ep3 ${tag}"
          fi

          git push --quiet --tags
        env:
          cwlVersion: v1.0
          CONFORMANCE_TOKEN: ${{ secrets.CONFORMANCE_TOKEN }}
          tag: ${{ needs.info.outputs.tag }}
          has_tag: ${{ needs.info.outputs.has_tag }}
      - uses: actions/upload-artifact@v1
        with:
          name: junit.xml
          path: cwl/v1.0/junit.xml

  docker:
    runs-on: ubuntu-latest
    needs: conformance
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/tom-tan/ep3
          tag-match: v\d+.\d+.\d+
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/tom-tan/ep3:master

  release:
    runs-on: ubuntu-latest
    needs: [info, conformance]
    if: github.event_name == 'push' && needs.info.outputs.has_tag == 'true'
    steps:
      - name: Generate release text
        run: |
          echo << EOS > $GITHUB_WORKSPACE/release.md
          ## Conformance tests for CWL v1.0
          ep3 version: [![version](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/version.json)](https://github.com/tom-tan/ep3/releases/tag/${tag}) [![commit](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/commit.json)](https://github.com/tom-tan/ep3/tree/${tag})
          ### Classes
          [![CommandLineTool](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/command_line_tool.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html) [![ExpressionTool](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/expression_tool.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html#ExpressionTool) [![Workflow](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/workflow.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html)

          ### Required features
          [![Required](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/required.json?icon=commonwl)](https://www.commonwl.org/v1.0/)

          ### Optional features
          [![DockerRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/docker.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#DockerRequirement) [![EnvVarRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/env_var.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#EnvVarRequirement) [![InitialWorkDirRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/initial_work_dir.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#InitialWorkDirRequirement) [![InlineJavascriptRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/inline_javascript.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#InlineJavascriptRequirement) [![MultipleInputFeatureRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/multiple_input.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html#MultipleInputFeatureRequirement) [![ResourceRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/resource.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#ResourceRequirement) [![ScatterFeatureRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/scatter.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html#ScatterFeatureRequirement) [![SchemaDefRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/schema_def.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#SchemaDefRequirement) [![ShellCommandRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/shell_command.json?icon=commonwl)](https://www.commonwl.org/v1.0/CommandLineTool.html#ShellCommandRequirement) [![StepInputExpressionRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/step_input.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html#StepInputExpressionRequirement) [![SubworkflowFeatureRequirement](https://badgen.net/https/raw.githubusercontent.com/tom-tan/conformance/${tag}/conformance/ep3/cwl_${cwlVersion}/ep3_${tag}/subworkflow.json?icon=commonwl)](https://www.commonwl.org/v1.0/Workflow.html#SubworkflowFeatureRequirement)
          EOS
        env:
          cwlVersion: v1.0
          tag: ${{ needs.info.outputs.tag }}
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.info.outputs.tag }}
          release_name: ${{ format('ep3 {0}', needs.info.outputs.tag) }}
          body_path: $GITHUB_WORKSPACE/release.md
          draft: true
          prerelease: true
