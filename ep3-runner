#!/usr/bin/env ruby
# coding: utf-8
require 'optparse'
require 'fileutils'
require 'tmpdir'
require 'json'
require 'time'

def run_cmd(cmd, debug)
  ret = system(cmd)
  code = $?.exitstatus
  hash = {
    'success' => ret,
    'commmand' => cmd, 'return' => code,
    'tag' => 'ep3.system', 'timestamp' => Time.now.iso8601(7),
  }
  if debug
    warn JSON.dump hash
  end
  hash
rescue Interrupt
  hash = {
    'success' => false,
    'commmand' => cmd, 'interrupted' => true,
    'tag' => 'ep3.system', 'timestamp' => Time.now.iso8601(7),
  }
  if debug
    puts JSON.dump hash
  end
  hash
rescue => e
  hash = {
    'success' => false,
    'commmand' => cmd, 'message' => e.to_s,
    'tag' => 'ep3.system', 'timestamp' => Time.now.iso8601(7),
  }
  if debug
    puts JSON.dump hash
  end
  hash
end

if $0 == __FILE__
  extensions = []

  parser = OptionParser.new
  parser.banner = "Usage: #{$0} cwl [jobfile]"
  parser.on('--tmpdir=TMP', 'directory for temporary files')
  parser.on('--outdir=OUT', 'directory for output objects')
  parser.on('--leave-tmpdir', 'do not remove temporary directory')
  parser.on('--debug', 'enable debug output')
  parser.on('--quiet', 'disable information output')
  parser.on('--extension=EXT', 'specify extension') { |ext|
    extensions.push ext
  }
  parser.on('--version', 'show version information') {
    system('git describe', :chdir => File.dirname($0))
    exit
  }

  basedir = File.dirname(File.realpath($0))

  opts = parser.getopts(ARGV)
  unless ARGV.length == 1 or ARGV.length == 2
    puts parser.help
    exit
  end

  cwl = ARGV.shift
  job = if ARGV.empty?
          nil
        else
          ARGV.shift
        end

  # Note: Dir.mktmpdir includes side effect
  tmpdir = opts.fetch('tmpdir', Dir.mktmpdir)
  target_arg = "--target-dir=#{tmpdir}"

  outdir = opts.fetch('outdir', '.')
  dst_arg = "--destination=#{outdir}"

  debug = opts.fetch('debug', false)
  quiet = opts.fetch('quiet', false)

  ret_init = run_cmd("#{basedir}/ep3 init --force #{target_arg} #{cwl} > /dev/null", debug)
  unless ret_init['success']
    exit ret_init.fetch('return', 1)
  end

  begin
    unless extensions.empty?
      ret_hook = run_cmd("#{basedir}/ep3 hook --extensions=#{extensions.join(',')} #{target_arg}", debug)
      if ret_hook.include? 'interrupted'
        exit 1
      elsif not ret_hook['success']
        exit ret_hook.fetch('return', 1)
      end
    end

    qopt = quiet ? '--quiet ' : ''
    dopt = debug ? '--debug ' : ''
    ret_run = run_cmd("#{basedir}/ep3 run #{qopt}#{dopt}#{target_arg} #{job}", debug)

    if ret_run.include? 'interrupted'
      exit 1
    elsif not ret_run['success']
      exit ret_run.fetch('return', 1)
    end

    ret_list = run_cmd("#{basedir}/ep3 list #{target_arg} --copy #{dst_arg}", debug)
    if ret_list['success']
      exit 0
    else
      exit ret_list.fetch('success', 1)
    end    
  rescue => e
    raise e
  ensure
    leave_dir_arg = if opts.include? 'leave-tmpdir'
                      '--leave-tmpdir '
                    else
                      ''
                    end
    unless opts.include? 'leave-tmpdir'
      FileUtils.remove_entry tmpdir
    end
  end
end
